- name: Install kubeseal
  vars:
    architecture: "{{'arm64' if ansible_architecture == 'aarch64' else ansible_architecture}}"
  shell: |
    KUBESEAL_VERSION='0.29.0' 
    curl -OL "https://github.com/bitnami-labs/sealed-secrets/releases/download/v${KUBESEAL_VERSION:?}/kubeseal-${KUBESEAL_VERSION:?}-linux-{{ architecture }}.tar.gz"
    tar -xvzf kubeseal-${KUBESEAL_VERSION:?}-linux-{{ architecture }}.tar.gz kubeseal
    rm kubeseal-${KUBESEAL_VERSION:?}-linux-{{ architecture }}.tar.gz
    sudo install -m 755 kubeseal /usr/local/bin/kubeseal
    rm kubeseal
  args:
    creates: /usr/local/bin/kubeseal

- name: Wait for sealed secrets controller to be ready
  shell: |
    kubectl rollout status -n kube-system deploy/sealed-secrets-controller  
  register: sealed_secrets_ready
  retries: 30
  delay: 5
  until: sealed_secrets_ready.rc == 0

- name: Check if sealed porkbun key exists
  stat:
    path: "{{ ansible_env.HOME }}/sealed-secrets-porkbun-key.yaml"
  register: sealed_porkbun_key_stat

- name: Check if sealed porkbun secret key exists
  stat:
    path: "{{ ansible_env.HOME }}/sealed-secrets-porkbun-secret-key.yaml"
  register: sealed_porkbun_secret_key_stat

- name: Check if sealed google client id exists
  stat:
    path: "{{ ansible_env.HOME }}/sealed-secrets-google-client-id.yaml"
  register: sealed_google_client_id_stat

- name: Check if sealed google client secret exists
  stat:
    path: "{{ ansible_env.HOME }}/sealed-secrets-google-client-secret.yaml"
  register: sealed_google_client_secret_stat

- name: Check if sealed google refresh token exists
  stat:
    path: "{{ ansible_env.HOME }}/sealed-secrets-google-refresh_token.yaml"
  register: sealed_google_refresh_token_stat

- name: Create secrets and push them to Git
  when: not (sealed_porkbun_key_stat.stat.exists and sealed_porkbun_secret_key_stat.stat.exists and sealed_google_client_id_stat.exists and sealed_google_client_secret_stat.exists and sealed_google_refresh_token_stat.exists)
  block:
    - name: Create Porkbun key sealed secret
      shell: |
        kubectl create secret generic porkbun-key \
          -o yaml \
          --dry-run=client \
          --from-literal=PORKBUN_API_KEY="{{ lookup('env', 'PORKBUN_API_KEY') }}" \
        | kubeseal -o yaml > "{{ ansible_env.HOME }}/sealed-secrets-porkbun-key.yaml"
      args:
        creates: "{{ ansible_env.HOME }}/sealed-secrets-porkbun-key.yaml"

    - name: Create Porkbun secret key sealed secret
      shell: |
        kubectl create secret generic porkbun-secret-key \
          -o yaml \
          --dry-run=client \
          --from-literal=PORKBUN_SECRET_API_KEY="{{ lookup('env', 'PORKBUN_SECRET_API_KEY') }}" \
        | kubeseal -o yaml > "{{ ansible_env.HOME }}/sealed-secrets-porkbun-secret-key.yaml"
      args:
        creates: "{{ ansible_env.HOME }}/sealed-secrets-porkbun-secret-key.yaml"

    - name: Create google client id sealed secret
      shell: |
        kubectl create secret generic google-client-id \
          -o yaml \
          --dry-run=client \
          --from-literal=GOOGLE_CLIENT_ID="{{ lookup('env', 'GOOGLE_CLIENT_ID') }}" \
        | kubeseal -o yaml > "{{ ansible_env.HOME }}/sealed-secrets-google-client-id.yaml"
      args:
        creates: "{{ ansible_env.HOME }}/sealed-secrets-google-client-id.yaml"

    - name: Create google client secret sealed secret
      shell: |
        kubectl create secret generic google-client-secret \
          -o yaml \
          --dry-run=client \
          --from-literal=GOOGLE_CLIENT_SECRET="{{ lookup('env', 'GOOGLE_CLIENT_SECRET') }}" \
        | kubeseal -o yaml > "{{ ansible_env.HOME }}/sealed-secrets-google-client-secret.yaml"
      args:
        creates: "{{ ansible_env.HOME }}/sealed-secrets-google-client-secret.yaml"

    - name: Create google refresh token sealed secret
      shell: |
        kubectl create secret generic google-refresh-token \
          -o yaml \
          --dry-run=client \
          --from-literal=GOOGLE_REFRESH_TOKEN="{{ lookup('env', 'GOOGLE_REFRESH_TOKEN') }}" \
        | kubeseal -o yaml > "{{ ansible_env.HOME }}/sealed-secrets-google-refresh-token.yaml"
      args:
        creates: "{{ ansible_env.HOME }}/sealed-secrets-google-refresh-token.yaml"

    - name: Copy sealed Porkbun key to controller
      fetch:
        src: "{{ ansible_env.HOME }}/sealed-secrets-porkbun-key.yaml"
        dest: ../manifest/overlays/production/sealed-secrets-porkbun-key.yaml
        flat: yes

    - name: Copy sealed Porkbun secret key to controller
      fetch:
        src: "{{ ansible_env.HOME }}/sealed-secrets-porkbun-secret-key.yaml"
        dest: ../manifest/overlays/production/sealed-secrets-porkbun-secret-key.yaml
        flat: yes

    - name: Copy sealed google client id to controller
      fetch:
        src: "{{ ansible_env.HOME }}/sealed-secrets-google-client-id.yaml"
        dest: ../manifest/overlays/production/sealed-secrets-google-client-id.yaml
        flat: yes

    - name: Copy sealed google client secret to controller
      fetch:
        src: "{{ ansible_env.HOME }}/sealed-secrets-google-client-secret.yaml"
        dest: ../manifest/overlays/production/sealed-secrets-google-client-secret.yaml
        flat: yes

    - name: Copy sealed google refresh token to controller
      fetch:
        src: "{{ ansible_env.HOME }}/sealed-secrets-google-refresh-token.yaml"
        dest: ../manifest/overlays/production/sealed-secrets-google-refresh-token.yaml
        flat: yes

    - name: Git push new sealed secrets
      local_action:
        module: shell
        cmd: |
          git add sealed-secrets-porkbun-key.yaml sealed-secrets-porkbun-secret-key.yaml sealed-secrets-google-client-id.yaml sealed-secrets-google-client-secret.yaml sealed-secrets-google-refresh-token.yaml\
          && git commit -m "ANSIBLE BOOTSTRAP: resealing secrets" \
          && git push origin main
        chdir:
          ../manifest/overlays/production
